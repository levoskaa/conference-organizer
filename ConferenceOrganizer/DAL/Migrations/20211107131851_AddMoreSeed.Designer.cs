// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211107131851_AddMoreSeed")]
    partial class AddMoreSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("conferenceseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("presentationseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("professionalfieldseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("roomseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("sectionseq")
                .IncrementsBy(10);

            modelBuilder.Entity("Domain.Entitites.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4ddbbd1a-7b0c-4198-8425-1db1f7a32824",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2cff473-9a9c-4efe-9a65-db0d9dfd02ff",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKDSXxxP0vXF2JKmY2YXCQBN17k9IInOfb6MeN2mbopu9quy0DeBaArunpmiOZcDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "953acac8-43d9-4cb4-8b33-0ef89426dfa4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1148cfe5-31a5-46f2-a1c3-5279216e16c9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3bZI9MDV3Gmxk3uk7JmfQSbUJWMY1BdiAAu1IllaOSCNLraeYxr2NFICsflLMcPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ffc068f-487a-4ab1-a7e8-a49eaaf7c4f3",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81f1bbd0-d3b8-447b-8077-ed2640806f4b",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEEg0MtjkyrJtwEYktkKc7zZ8y5AAPZA2nrZzrGcYvgdQ9MmKMUPIu+9hsiWSAghQzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88ccd836-5711-421c-b7e3-bc67ea52d390",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1dcb582-a7d7-4bbb-8434-f12119f32c63",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEOI/FkFOWakwYLx5mcG2AJqMT7TTeeNozIDWDoX5+UmsGkgBAEdabo8oyVuxhPoC0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f72f7e22-5006-4182-b9df-e5fcca6e6de3",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94969a43-f21f-4221-8bb0-9d9c9489af50",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0tPx+8AM2YaZx5sxyN/MXV0yLo6DZbRlGxn9Bj9C8lzJGqepjq3vL8OkhMaWttbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04d4c17c-7ec9-4fb9-a7cb-170600a1ce30",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2f4e186-39bb-488a-b2ce-f77c2f47ca40",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEC3jrpg8W58An4qRUVMJRhzMFDfrLHF3eyHipEQ5udbpfljHmtiKBq9VAXuOfTMetw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7d53f30-3004-428b-9ee5-da9cf22beaa2",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a96f0c5-fae6-4409-b0e6-e1188f44af5f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGUe+II9ZNImeydHog60s4OXOkoLCAU39eB7ZjDKsjbq1kyBQPk3fw08Cv1nFE8drQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edeb099d-af26-4ede-841e-7e2b92178e98",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd2b0810-f010-4bf1-ae90-a582650c552d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGcdTEKiFBv+OWyvVBqaTXXpPIz33JM0bnkodJx0YGl2dv0NgJoz+gveMVz3uQ8rYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15b1eb02-a491-4ebb-bbb4-1ee2ac77ba8a",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f949dea0-b6e4-4ab1-9e94-2a9e1c852b11",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZelmkmXDnA5ZTsYiaEIslXe7spp3WDFJp4QymcLzd5uJ0VefapZOdXZl4hL/CuJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ad24e12-842d-41df-9e81-1e8d90baba20",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a30cd718-4382-49b7-a12a-fef5d92796ac",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5Tw+KoBd7aGWyOGKDHc8u8hrgHGs/KUyQLZ+O6a8w+8LU15tcICYoRKcDvgsD3pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcbb913d-f328-4784-8830-9c5e5bb38b05",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fff36774-3b30-4e4b-94a8-94e356959220",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEE94O+obHxKyBCusEYSOZzQLvE0LIfbpXtzbUJ8bBfgcFrJgH0a/ABIvMMnReeiNrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a70bf153-b9ab-4efb-a111-31e2cb81ed39",
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7f353b1-60d6-41e0-a4b7-404d6ff04cd1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEMaXEfrCYPXVQ0jKokhfNPbdE/UyPzABeKbDnNGR0aOaWwP/wICseo/RyKnBP3uQLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61795743-8a46-49cc-b5f2-4ae972812e32",
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f04d9410-9fbd-45c4-aa48-45a69f20b0b8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAELQ4sMQ6u/0ZPkTNkYpcSxO+27H14kBiBNWB9nOAnNxu9YPK39/fZ/7Mf02hx5OLIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fb4cb70-950f-476d-b035-f12b2894f535",
                            TwoFactorEnabled = false,
                            UserName = "user13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea2eccc5-7251-4e58-9ec5-d3f1ed97670c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEKaEFpj5MRDgLy/C63rBYADqmzJEssyZvyZMZN9bN2Q0cGjWTG8htkw41KJVK60/AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3aae4c0-22ac-4577-8861-62e14281b9dd",
                            TwoFactorEnabled = false,
                            UserName = "user14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23466021-e016-4688-80c1-a40bea2b806c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEINCd8MZcknpJVqTe2WP9zAAXSnZVZlSWuNH4EbEO5vHZIs+CZD0hXdwOVTBwCmFFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15bfb0c3-06cc-4f4d-92a1-7615698e3463",
                            TwoFactorEnabled = false,
                            UserName = "user15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ac68869-1203-4f21-924e-cb997f5e8563",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEKN2+d+9SGy0NEvOuQiU0NOgCJBjfSPy5IJjhGzLiiX6UqMRhLqxKj19tgFIS6pPOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "957be00d-146f-4585-b008-e06580bd09e2",
                            TwoFactorEnabled = false,
                            UserName = "user16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdf9c347-67f9-46cf-91b0-b2866eac504e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvW04g5VmdFDfkWmIS1UKqx3tSxmsLu7xP3yo/ZFqNp2tFOqBCm3qFblqAPiEJE8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e575ba67-030f-43c2-8c6a-3cd160df756e",
                            TwoFactorEnabled = false,
                            UserName = "user17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee25d22c-8cba-4aa7-98a6-f86f412143e0",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEF8e6QmrA9YfDeJ1QrNSl3q1zFb1rN9+AdUBBZEpQ46nO52OPC3XAfZVmxrC0Mds4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fda7b75b-ca77-4039-aa0a-0382be59e7ab",
                            TwoFactorEnabled = false,
                            UserName = "user18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b196f287-c0d8-447e-989c-4b1480fd78f4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEMG2JsKUcc1GBiKZZfKHDa2xYDIGerA1tgF1+cs1p2brRyUkCg212NuKutezWzEvWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9946c9ca-31b2-43c7-b07f-fc7da1da76a6",
                            TwoFactorEnabled = false,
                            UserName = "user19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23f2a340-e1e4-420b-b23f-666754dd3e42",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtl3PYQ+oK+nLi8BB6NYCwJGCaCvQOIcxzvr4TIGq36ENk/M2NQCtGBJBEBrh+gNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c83f0c3-7b9c-46e7-b09c-33126ed5a849",
                            TwoFactorEnabled = false,
                            UserName = "user20"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserConference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ConferenceId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("UserConference");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 4,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 5,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 6,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 7,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 8,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 9,
                            ConferenceId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserProfessionalField", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("UserProfessionalField");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 3,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 4,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 4,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 5,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 5,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 6,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 7,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 7,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 8,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 9,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 9,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 10,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 11,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 12,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 14,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 15,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 16,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 16,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 17,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 18,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 18,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 19,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 20,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 20,
                            FieldId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "conferenceseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conference 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Conference 2"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Presentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "presentationseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Presenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Presentations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Presenter = "HerczegMáté",
                            SectionId = 2,
                            Title = "Presentation 1"
                        },
                        new
                        {
                            Id = 2,
                            Presenter = "KissSára",
                            SectionId = 3,
                            Title = "Presentation 2"
                        },
                        new
                        {
                            Id = 3,
                            Presenter = "FehérMáté",
                            SectionId = 4,
                            Title = "Presentation 3"
                        },
                        new
                        {
                            Id = 4,
                            Presenter = "KovácsBernadett",
                            SectionId = 1,
                            Title = "Presentation 4"
                        },
                        new
                        {
                            Id = 5,
                            Presenter = "KissGéza",
                            SectionId = 2,
                            Title = "Presentation 5"
                        },
                        new
                        {
                            Id = 6,
                            Presenter = "FehérBernadett",
                            SectionId = 3,
                            Title = "Presentation 6"
                        },
                        new
                        {
                            Id = 7,
                            Presenter = "HerczegMáté",
                            SectionId = 4,
                            Title = "Presentation 7"
                        },
                        new
                        {
                            Id = 8,
                            Presenter = "NémethSára",
                            SectionId = 1,
                            Title = "Presentation 8"
                        },
                        new
                        {
                            Id = 9,
                            Presenter = "ErőssSára",
                            SectionId = 2,
                            Title = "Presentation 9"
                        },
                        new
                        {
                            Id = 10,
                            Presenter = "NémethMáté",
                            SectionId = 3,
                            Title = "Presentation 10"
                        },
                        new
                        {
                            Id = 11,
                            Presenter = "FehérAnna",
                            SectionId = 4,
                            Title = "Presentation 11"
                        },
                        new
                        {
                            Id = 12,
                            Presenter = "KovácsLevente",
                            SectionId = 1,
                            Title = "Presentation 12"
                        },
                        new
                        {
                            Id = 13,
                            Presenter = "KovácsSára",
                            SectionId = 2,
                            Title = "Presentation 13"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ProfessionalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "professionalfieldseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sociology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Economics"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "roomseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            UniqueName = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 150,
                            UniqueName = "A2"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 80,
                            UniqueName = "A3"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 60,
                            UniqueName = "A4"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 75,
                            UniqueName = "A5"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 30,
                            UniqueName = "B1"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 130,
                            UniqueName = "B2"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 50,
                            UniqueName = "B3"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 100,
                            UniqueName = "B4"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 75,
                            UniqueName = "B5"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "sectionseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("FieldId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConferenceId = 1,
                            FieldId = 3,
                            RoomId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ConferenceId = 1,
                            FieldId = 1,
                            RoomId = 3,
                            UserId = 10
                        },
                        new
                        {
                            Id = 3,
                            ConferenceId = 2,
                            FieldId = 4,
                            RoomId = 5,
                            UserId = 16
                        },
                        new
                        {
                            Id = 4,
                            ConferenceId = 2,
                            FieldId = 5,
                            RoomId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            ConferenceId = 2,
                            FieldId = 1,
                            RoomId = 1,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserConference", b =>
                {
                    b.HasOne("Domain.Entitites.Conference", "Conference")
                        .WithMany("UserConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", "User")
                        .WithMany("UserConferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserProfessionalField", b =>
                {
                    b.HasOne("Domain.Entitites.ProfessionalField", "Field")
                        .WithMany("UserFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", "User")
                        .WithMany("UserFields")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.OwnsOne("Domain.Entitites.TimeFrame", "TimeFrame", b1 =>
                        {
                            b1.Property<int>("ConferenceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:HiLoSequenceName", "conferenceseq")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                            b1.Property<DateTime>("BeginDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BeginDate");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.HasKey("ConferenceId");

                            b1.ToTable("Conferences");

                            b1.WithOwner()
                                .HasForeignKey("ConferenceId");

                            b1.HasData(
                                new
                                {
                                    ConferenceId = 1,
                                    BeginDate = new DateTime(2021, 12, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ConferenceId = 2,
                                    BeginDate = new DateTime(2022, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Domain.Entitites.Presentation", b =>
                {
                    b.HasOne("Domain.Entitites.Section", "Section")
                        .WithMany("Presentations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.HasOne("Domain.Entitites.Conference", "Conference")
                        .WithMany("Sections")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ProfessionalField", "Field")
                        .WithMany("SectionsAboutField")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Room", "Room")
                        .WithMany("Sections")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", "User")
                        .WithMany("ModeratedSections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entitites.TimeFrame", "TimeFrame", b1 =>
                        {
                            b1.Property<int>("SectionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:HiLoSequenceName", "sectionseq")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                            b1.Property<DateTime>("BeginDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BeginDate");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.HasKey("SectionId");

                            b1.ToTable("Sections");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");

                            b1.HasData(
                                new
                                {
                                    SectionId = 1,
                                    BeginDate = new DateTime(2021, 12, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 2,
                                    BeginDate = new DateTime(2021, 12, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 3,
                                    BeginDate = new DateTime(2022, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 12, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 4,
                                    BeginDate = new DateTime(2022, 1, 12, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 15, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 5,
                                    BeginDate = new DateTime(2022, 1, 12, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Conference");

                    b.Navigation("Field");

                    b.Navigation("Room");

                    b.Navigation("TimeFrame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUser", b =>
                {
                    b.Navigation("ModeratedSections");

                    b.Navigation("UserConferences");

                    b.Navigation("UserFields");
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("UserConferences");
                });

            modelBuilder.Entity("Domain.Entitites.ProfessionalField", b =>
                {
                    b.Navigation("SectionsAboutField");

                    b.Navigation("UserFields");
                });

            modelBuilder.Entity("Domain.Entitites.Room", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.Navigation("Presentations");
                });
#pragma warning restore 612, 618
        }
    }
}
