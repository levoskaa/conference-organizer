// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211112132021_UpdateSectionChairman")]
    partial class UpdateSectionChairman
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("conferenceseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("presentationseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("professionalfieldseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("roomseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("sectionseq")
                .IncrementsBy(10);

            modelBuilder.Entity("Domain.Entitites.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3c17c47a-c4f9-4df5-9658-364a5682754c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d79bba5-18e6-4748-978b-86d33c1898e7",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWqJLVszbistyJ52Eda1acBsqQlf4eXq3ZOy5MFKTKuGM+ih1Sun3aEQqBYjyHwdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b13b5d0-d756-4c2a-b969-4620b258e5c4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac78a329-105e-428e-b1d6-4a23cd5d0fe6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAENfnSsTN6IY/dpHqEw65RKbw1FpOCMNqPmuxQhsEENJhc0ewNipAx7B7CQ5ewUCGNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc7b456c-2f2c-4909-b980-d37ad593ef3f",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c9d485f-f6c4-4394-83e3-e6d5991f564e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdw/6ypcseL0+I1mjxEGY9aTQ3inAv23OgYAr8xG8X/0zhII9Kjy8iec+OqYw5iTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ef67851-ae4a-4916-b76c-f95d34b08028",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85aa145b-8b0f-4635-baf6-dd71411650ac",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEMw7NxQiPfMqnHytLupXP8O1BMJ+6vj9T9gsq+Qs0bhGx+rLjG8qECwcLhPPIS9pEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f3b58eb-c386-4597-b102-46561d45e0c7",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87d6592d-7995-4592-ac03-e752fd8cbc55",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAEAACcQAAAAELBAYbBmiqZFF7zAQqPf8Q3YGLhB6mfdOQ1fXCLanyeMLQPJohYaBclSbcMZSkSTKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7db0a03b-324e-4cba-bd76-f842fe204679",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb0461c8-befd-496c-ab1e-f298d85e9851",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAEAACcQAAAAEELrAIs6HyEm75Vt1mZpA4EoTXcM1mXILgo1wyz66K0NqGiidWpWIYP+b/i9Jap27Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6525a1be-cd1c-4b78-acef-6e91be3f8ab5",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ab85a74-cc11-4982-8c5f-3c939bc40168",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAEAACcQAAAAEELmCg+abXF+JIzjXU+f3lVLTtGkNCb2weyutIK+Sj21RhZ36NU7S2I/x0FYWZauHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce9af71a-8040-4439-b44e-1b627cc4ce70",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e26cda02-4c88-491a-831b-39f089a5337c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAEAACcQAAAAEP1YR4fHfkNOQiykz+ZBRtJhduxhSjQ91rgY24V6dH6XlQgGdDmuimL+Bs2msmonMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a88ac40-5703-451a-9f8e-fedf88b0fe4c",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d940dd-fdb8-4def-9c9a-c0e60a8b060d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6zpfz7UT+1hI4iU1h3Y5s8qsg+VVf/iB9zAm91iX/msiHG98b4VszFNWn9c7Enew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "09b9bade-5aa6-4bf0-827f-98aa636c5ead",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9685bbf4-7ba1-4932-a402-3365e2d9c913",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEHn5lX3spJzCelqI9s06kJzFmxT+IffkcNzsPN/NqK86O1xjlT7yAlsZsRtgs/AWBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "724eadc8-8a98-40ad-9688-3b2505f9f2f7",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5a4afc9-e2f2-41b4-8c32-6fca77aa0956",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEHg3NkbAdxP8PN6Np9KyXZ2ZXKHXhsZeY2PyhfPUkp9xpEUuruWxA5GNpepp+krEXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "352d012a-5a3c-47bf-810b-5f62cc125b5d",
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aad9b611-604e-4b23-89c5-afd17d832b4d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEKPON4PS0iTsEXh915PqUt/wQERmNocZio72Jwn6ZmANj2uvBnm6n2hLNlLdnnKNRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bba43937-2662-44e3-b020-29309f78514a",
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48d9331a-0cf8-402f-a83d-f332a8c6c8f4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdKCfzdcCukt1YL7Hp0wVaWXL9GW/nLUlah6yeqTY7slyzYUQRmGnVnBYKYDpOPZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "494a28c6-174d-498d-b070-fbe36aaf3a8e",
                            TwoFactorEnabled = false,
                            UserName = "user13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d4e7479-0100-42d7-b5e8-0f97f46a2fcd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEINdJwttCKTRbxc/cyphOuTl21h9M3xC0VTzF0JIqChGWhk1/OOqwLxmiGRkI+Oxdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ae4b3a3-3c45-4e6d-94b1-ea26ab4d0527",
                            TwoFactorEnabled = false,
                            UserName = "user14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efc68686-343a-4fc4-8b8d-e949dc9ebaaa",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5h0Y/CWkNx1KFEoshRwZrXeT48AlPr1qEJhGsB61V/Q1SZ0SdhWcWbp/dL0juzlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce285c45-4fad-451e-b245-848270edc867",
                            TwoFactorEnabled = false,
                            UserName = "user15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a256c94-4900-4a4d-bfdc-7d41d88f0e3d",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzlWI8n18LAxUWiYOyiWA8YTTjqhUVZyD5mR80zDkBy0HvXSkl2jvg9vNLzZfFnog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f9c9f4c-aa41-4149-a990-e5be6b369f3e",
                            TwoFactorEnabled = false,
                            UserName = "user16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1d64d5f-d8a7-45a4-bda6-561a22b8027a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEBbVZohgqPmun+vgaBBK2biTR8j4AjtjfnuYDDjI72auaAf2i++R3rNJ9KbHxm1TxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d44587ad-6001-4061-8714-e37bcf29b032",
                            TwoFactorEnabled = false,
                            UserName = "user17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a379216-ba03-45fb-9d27-964736e75a58",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAENGvgVxNFFBD8WpmpMsvKIJ/xwVz73M+j3wIUsdEg7LObzDdCgSeWbd8mTT6u15yug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d459fcf-fbcc-4297-ad4d-ea1bd8335f5d",
                            TwoFactorEnabled = false,
                            UserName = "user18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48a3235c-0145-4817-b431-4aa11e296169",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHwl8kytJl9Jrl3JGOC5udqZGWcVDcYW2qrCh7su+AD/BD8Ggu4BUYpL3ynGuRykw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b7e7591-4d96-43af-b262-9756d7a02df3",
                            TwoFactorEnabled = false,
                            UserName = "user19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7b65fba-106f-4d6c-a008-34a55853f6c2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9t2gA5GrqvKYgH5aAaO8SghJALySAQah3CZ9hnE4bAJ/Bcv2UBhfDGxk903BHvUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72635844-422d-46a6-99fa-4fc3d7d79c30",
                            TwoFactorEnabled = false,
                            UserName = "user20"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserConference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ConferenceId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("UserConference");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 3,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 4,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 5,
                            ConferenceId = 1
                        },
                        new
                        {
                            UserId = 6,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 7,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 8,
                            ConferenceId = 2
                        },
                        new
                        {
                            UserId = 9,
                            ConferenceId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserProfessionalField", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("UserProfessionalField");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 3,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 4,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 4,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 5,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 5,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 6,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 7,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 7,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 8,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 9,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 9,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 10,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 11,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 12,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 13,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 14,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 15,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 16,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 16,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 17,
                            FieldId = 3
                        },
                        new
                        {
                            UserId = 18,
                            FieldId = 4
                        },
                        new
                        {
                            UserId = 18,
                            FieldId = 5
                        },
                        new
                        {
                            UserId = 19,
                            FieldId = 1
                        },
                        new
                        {
                            UserId = 20,
                            FieldId = 2
                        },
                        new
                        {
                            UserId = 20,
                            FieldId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "conferenceseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Conference 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Conference 2"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Presentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "presentationseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Presenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Presentations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Presenter = "ErőssLevente",
                            SectionId = 2,
                            Title = "Presentation 1"
                        },
                        new
                        {
                            Id = 2,
                            Presenter = "HerczegLevente",
                            SectionId = 3,
                            Title = "Presentation 2"
                        },
                        new
                        {
                            Id = 3,
                            Presenter = "NémethBernadett",
                            SectionId = 4,
                            Title = "Presentation 3"
                        },
                        new
                        {
                            Id = 4,
                            Presenter = "FehérBernadett",
                            SectionId = 1,
                            Title = "Presentation 4"
                        },
                        new
                        {
                            Id = 5,
                            Presenter = "KovácsSára",
                            SectionId = 2,
                            Title = "Presentation 5"
                        },
                        new
                        {
                            Id = 6,
                            Presenter = "FehérLevente",
                            SectionId = 3,
                            Title = "Presentation 6"
                        },
                        new
                        {
                            Id = 7,
                            Presenter = "KovácsBernadett",
                            SectionId = 4,
                            Title = "Presentation 7"
                        },
                        new
                        {
                            Id = 8,
                            Presenter = "FehérLevente",
                            SectionId = 1,
                            Title = "Presentation 8"
                        },
                        new
                        {
                            Id = 9,
                            Presenter = "NémethSára",
                            SectionId = 2,
                            Title = "Presentation 9"
                        },
                        new
                        {
                            Id = 10,
                            Presenter = "ErőssLevente",
                            SectionId = 3,
                            Title = "Presentation 10"
                        },
                        new
                        {
                            Id = 11,
                            Presenter = "KovácsSára",
                            SectionId = 4,
                            Title = "Presentation 11"
                        },
                        new
                        {
                            Id = 12,
                            Presenter = "KissMáté",
                            SectionId = 1,
                            Title = "Presentation 12"
                        },
                        new
                        {
                            Id = 13,
                            Presenter = "ErőssAnna",
                            SectionId = 2,
                            Title = "Presentation 13"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ProfessionalField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "professionalfieldseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProfessionalFields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sociology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Economics"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "roomseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("UniqueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            UniqueName = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 150,
                            UniqueName = "A2"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 80,
                            UniqueName = "A3"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 60,
                            UniqueName = "A4"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 75,
                            UniqueName = "A5"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 30,
                            UniqueName = "B1"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 130,
                            UniqueName = "B2"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 50,
                            UniqueName = "B3"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 100,
                            UniqueName = "B4"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 75,
                            UniqueName = "B5"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "sectionseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ChairmanId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChairmanId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("FieldId");

                    b.HasIndex("RoomId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChairmanId = 2,
                            ConferenceId = 1,
                            FieldId = 3,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 2,
                            ChairmanId = 10,
                            ConferenceId = 1,
                            FieldId = 1,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 3,
                            ChairmanId = 16,
                            ConferenceId = 2,
                            FieldId = 4,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 4,
                            ChairmanId = 7,
                            ConferenceId = 2,
                            FieldId = 5,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 5,
                            ChairmanId = 10,
                            ConferenceId = 2,
                            FieldId = 1,
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserConference", b =>
                {
                    b.HasOne("Domain.Entitites.Conference", "Conference")
                        .WithMany("UserConferences")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", "User")
                        .WithMany("UserConferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUserProfessionalField", b =>
                {
                    b.HasOne("Domain.Entitites.ProfessionalField", "Field")
                        .WithMany("UserFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", "User")
                        .WithMany("UserFields")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.OwnsOne("Domain.Entitites.TimeFrame", "TimeFrame", b1 =>
                        {
                            b1.Property<int>("ConferenceId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:HiLoSequenceName", "conferenceseq")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                            b1.Property<DateTime>("BeginDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BeginDate");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.HasKey("ConferenceId");

                            b1.ToTable("Conferences");

                            b1.WithOwner()
                                .HasForeignKey("ConferenceId");

                            b1.HasData(
                                new
                                {
                                    ConferenceId = 1,
                                    BeginDate = new DateTime(2021, 12, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    ConferenceId = 2,
                                    BeginDate = new DateTime(2022, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Domain.Entitites.Presentation", b =>
                {
                    b.HasOne("Domain.Entitites.Section", "Section")
                        .WithMany("Presentations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", "Chairman")
                        .WithMany("ModeratedSections")
                        .HasForeignKey("ChairmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Conference", "Conference")
                        .WithMany("Sections")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ProfessionalField", "Field")
                        .WithMany("SectionsAboutField")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Room", "Room")
                        .WithMany("Sections")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entitites.TimeFrame", "TimeFrame", b1 =>
                        {
                            b1.Property<int>("SectionId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:HiLoSequenceName", "sectionseq")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                            b1.Property<DateTime>("BeginDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BeginDate");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.HasKey("SectionId");

                            b1.ToTable("Sections");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");

                            b1.HasData(
                                new
                                {
                                    SectionId = 1,
                                    BeginDate = new DateTime(2021, 12, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 2,
                                    BeginDate = new DateTime(2021, 12, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2021, 12, 7, 12, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 3,
                                    BeginDate = new DateTime(2022, 1, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 12, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 4,
                                    BeginDate = new DateTime(2022, 1, 12, 12, 30, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 15, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    SectionId = 5,
                                    BeginDate = new DateTime(2022, 1, 12, 15, 0, 0, 0, DateTimeKind.Unspecified),
                                    EndDate = new DateTime(2022, 1, 12, 16, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Chairman");

                    b.Navigation("Conference");

                    b.Navigation("Field");

                    b.Navigation("Room");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entitites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.ApplicationUser", b =>
                {
                    b.Navigation("ModeratedSections");

                    b.Navigation("UserConferences");

                    b.Navigation("UserFields");
                });

            modelBuilder.Entity("Domain.Entitites.Conference", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("UserConferences");
                });

            modelBuilder.Entity("Domain.Entitites.ProfessionalField", b =>
                {
                    b.Navigation("SectionsAboutField");

                    b.Navigation("UserFields");
                });

            modelBuilder.Entity("Domain.Entitites.Room", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Domain.Entitites.Section", b =>
                {
                    b.Navigation("Presentations");
                });
#pragma warning restore 612, 618
        }
    }
}
